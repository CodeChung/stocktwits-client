{"version":3,"sources":["routes/Search/StockButton.js","routes/Search/Search.js","routes/Stocks/Stocks.js","routes/Tweets/Tweets.js","App.js","serviceWorker.js","index.js"],"names":["StockButton","title","this","props","className","onClick","delete","React","Component","Search","state","stockText","saved","savedButtons","map","stock","key","deleteStock","onSubmit","e","addStock","onChange","changeText","value","placeholder","name","id","for","Stocks","stocksList","stocks","activateStock","Tweets","tweets","setState","length","App","currentStock","console","log","event","preventDefault","split","forEach","trim","toUpperCase","push","filter","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f00cadba.chunk.js","sourcesContent":["import React from 'react'\n\nclass StockButton extends React.Component {\n    render() {\n        const { title } = this.props\n        return (\n            <div className='stock-button'>\n                {title}\n                <button onClick={() => this.props.delete()}>X</button>\n            </div>\n        )\n    }\n}\n\nexport default StockButton","import React from 'react'\nimport StockButton from './StockButton'\nimport './Search.css'\n\nclass Search extends React.Component {\n    state = {\n        stockText: '',\n        saved: []\n    }\n    render() {\n        const { saved, stockText } = this.props\n        const savedButtons = saved.map(stock => <li key={stock}><StockButton delete={() => this.props.deleteStock(stock)} title={stock} /></li>)\n        return (\n            <section className='col col-1'>\n                <form onSubmit={(e) => this.props.addStock(e)}>      \n                    <input onChange={(e) => this.props.changeText(e)} value={stockText} placeholder='AAPL, BABA, BAC' name='stock-search' id='stock-search' />    \n                    <button>Add</button>\n                    <label for='stock-search'>Search For A Stock By Its Symbol <br /> Or Search Multiple Stocks Separated By Commas</label>\n                </form>\n                <div className='saved-stocks'>\n                    <h2>My Stocks</h2>\n                    <ul>\n                        {savedButtons}\n                    </ul>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Search","import React from 'react'\nimport './Stocks.css'\n\nclass Stocks extends React.Component {\n    componentDidMount() {\n        \n    }\n    render() {\n        const { stocks } =  this.props\n        const stocksList = stocks.map(stock => \n            <li onClick={() => this.props.activateStock(stock)} key={stock} className='list-stock'>\n                <h2>{stock}</h2>\n                <div className='tweet-count'>\n                    1\n                </div>\n            </li>\n        )\n        return (\n            <section className='col col-2'>\n                <h2>Saved Stocks</h2>\n                <ul className='stocks'>\n                    {stocksList}\n                </ul>\n            </section>\n        )\n    }\n}\n\nexport default Stocks","import React from 'react'\nimport './Tweets.css'\n\nclass Tweets extends React.Component {\n    state = {\n        tweets: []\n    }\n    componentDidMount() {\n        const tweets = []\n        this.setState({ tweets })\n    }\n    render() {\n        const { tweets } = this.state\n        return (\n            <section className='col col-3'>\n                {tweets.length ? tweets : 'Search for a stock to get tweets'}\n            </section>\n        )\n    }\n}\n\nexport default Tweets","import React from 'react';\nimport './App.css';\nimport Search from './routes/Search/Search';\nimport Stocks from './routes/Stocks/Stocks';\nimport Tweets from './routes/Tweets/Tweets';\n\nclass App extends React.Component {\n  state = {\n    currentStock: null,\n    stockText: '',\n    saved: [],\n  }\n  activateStock = (currentStock) => {\n    console.log(currentStock)\n    this.setState({ currentStock })\n  }\n  addStock = (event) => {\n    event.preventDefault()\n\n    const { stockText, saved } = this.state\n    let stocks = stockText.split(/[\\s,]+/)\n    stocks.forEach(stock => stock.trim())\n    stocks = stocks.map(stock => stock.toUpperCase())\n    stocks.forEach(stock => saved.push(stock))\n    this.setState({ saved, stockText: '' })\n  }\n  deleteStock = (title) => {\n    let { saved } = this.state\n    saved = saved.filter(stock => stock !== title)\n    this.setState({ saved })\n  }\n  changeText = (event) => {\n    event.preventDefault()\n    this.setState({ stockText: event.target.value })\n  }\n  render() {\n    const { saved, stockText } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          StockTwits Search\n        </header>\n        <Search\n          addStock={this.addStock}\n          changeText={this.changeText}\n          deleteStock={this.deleteStock}\n          saved={saved}\n          stockText={stockText}\n        />\n        <Stocks \n          activateStock={this.activateStock}\n          stocks={saved} \n        />\n        <Tweets />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}